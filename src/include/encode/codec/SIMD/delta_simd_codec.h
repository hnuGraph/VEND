#ifndef VEND_DELTA_SIMD_CODEC_H
#define VEND_DELTA_SIMD_CODEC_H


#include "encode/codec/codec.h"
#include "simd_common.h"
#include "util/bitset_simd.h"

class DeltaSIMDCodec : public Codec {
public:
    void EncodeArray(const uint32_t *in, size_t in_size, uint8_t *out, uint32_t &out_bytes_length) override;

    size_t GetEncodeLength(const uint32_t *in, size_t in_size) { return 0; };

    size_t GetEncodeLength(const uint8_t *in, size_t in_size);

    size_t GetOneEncodeLength(uint32_t integer) override;

    void Decode(const uint8_t *in, size_t in_bytes_length, uint32_t *out, uint32_t &out_size) override;

    void ParseEncode(const uint32_t *in, size_t in_size, std::vector<DeltaInfo> &delta_infos) override;

    // TODO , replace **& , 2.   MIN AND MAX
    virtual FindRes FindWithCount(uint8_t *__restrict__ inbyte, uint32_t count, uint32_t element);

    virtual uint32_t GetRequiredBytes(const std::vector<uint32_t> &list);

    virtual uint32_t
    GetRequiredBytes(const std::vector<uint32_t> &list, uint32_t begin, uint32_t block_size) { return 0; };
protected:

    virtual uint8_t EncodeDeltas(const uint32_t *in, uint8_t *__restrict__ keyPtr,
                                 uint8_t *dataPtr, uint32_t count);

    uint8_t EncodeDelta(uint32_t val,
                        uint8_t **dataPtrPtr) {
        uint8_t *dataPtr = *dataPtrPtr;
        uint8_t code;
        //TODO fix little endian
        if (val < (1 << 8)) { // 1 byte
            *dataPtr = (uint8_t) (val);
            *dataPtrPtr += 1;
            code = 0;
        } else if (val < (1 << 16)) { // 2 bytes
            *dataPtr++ = val & 0x000000FF;
            *dataPtr++ = (val >> 8) & 0x000000FF;
            *dataPtrPtr += 2;
            code = 1;
        } else if (val < (1 << 24)) { // 3 bytes
            *dataPtr++ = val & 0x000000FF;
            *dataPtr++ = (val >> 8) & 0x000000FF;
            *dataPtr++ = (val >> 16) & 0x000000FF;
            *dataPtrPtr += 3;
            code = 2;
        } else { // 4 bytes
            *(uint32_t *) dataPtr = val;
            *dataPtrPtr += 4;
            code = 3;
        }

        return code;
    }

    virtual __m128i DecodeData(uint8_t control, uint8_t *__restrict__ *data_ptr);

    virtual __m128i RecoveryFromDelta(__m128i data, __m128i &pre);

    virtual uint32_t GenValue(uint32_t &pre, uint32_t original, int count) {
        uint32_t val = original - pre;
        pre = original;
        return val;
    }
};


class DeltaSIMDCodecV1 : public DeltaSIMDCodec {
public:


protected:

    __m128i RecoveryFromDelta(__m128i data, __m128i &pre) override;

    /**
     *     X1,X2-X1,X3-X1,X4-X1  X5,X6-X5,X7-X5,X8-X5
     * */
    inline uint32_t GenValue(uint32_t &pre, uint32_t original, int count) override {
        uint32_t val = 0;
        if (count % 4 == 0) {
            val = original;
            pre = original;
        } else {
            val = original - pre;
        }
        return val;
    }

};


class DeltaSIMDCodecV2 : public DeltaSIMDCodec {
public:

protected:

    virtual __m128i RecoveryFromDelta(__m128i data, __m128i &pre) override;

    /**
     *     X1,X2-X1,X3-X2,X4-X3  X5,X6-X5,X7-X6,X8-X7
     * */
    inline uint32_t GenValue(uint32_t &pre, uint32_t original, int count) override {
        uint32_t val = 0;
        if (count % 4 == 0) {
            val = original;
        } else {
            val = original - pre;
        }
        pre = original;
        return val;
    }

};

struct TreeNode {
    TreeNode **children;
    std::vector<uint32_t> masks;
    int idx_;
    int child_size_;
    
    ~TreeNode(){
        delete[] children;
        children = nullptr;
    }

    TreeNode() : children(nullptr), child_size_(0) {}

    TreeNode(int idx) : children(nullptr), idx_(idx), child_size_(0) {}

    TreeNode(int idx, int size) : idx_(idx), child_size_(size) {
        add_children(size);
    }

    void add_children(int size) {
        child_size_ = size;
        children = new TreeNode *[size];
        for (int i = 0; i < size; ++i) {
            children[i] = nullptr;
        }
    }
};

static constexpr uint8_t SEARCH_MASK[5] = {0x00, 0x01, 0x03, 0x07, 0x0F};

struct SearchTree {
    int groups_;
    int size_;
    TreeNode **nodes;
    std::vector<std::vector<uint32_t>> encode_list;

    SearchTree() : size_(0), groups_(0), nodes(nullptr) {};
    ~SearchTree(){
        for(int i=0;i<groups_;++i){
            delete nodes[i];
        }
        delete[] nodes;
        nodes=nullptr;
    }
    SearchTree(int size) : size_(size) {
        int node_nums = (size + 3) / 4;
        groups_ = node_nums;
        nodes = new TreeNode *[node_nums];
        for (int i = 0; i < node_nums; ++i) {
            nodes[i] = new TreeNode(i);
        }
        if (node_nums == 1)
            return;
        if (node_nums <= 4) {
            nodes[0]->add_children(node_nums - 1);
            for (int i = 0; i < node_nums - 1; ++i) {
                nodes[0]->children[i] = nodes[i + 1];
            }
        } else {
            nodes[0]->add_children(3);
            for (int i = 0; i < 3; ++i) {
                nodes[0]->children[i] = nodes[i + 1];
            }
            node_nums -= 4;
            int parents_num = 3;
            int current_idx = 4, parents_idx = 1;
            while (node_nums > parents_num * 5) {
                for (int i = 0; i < parents_num; ++i) {
                    nodes[i + parents_idx]->add_children(5);
                    for (int j = 0; j < 5; ++j) {
                        nodes[i + parents_idx]->children[j] = nodes[current_idx++];
                    }
                }
                parents_idx += parents_num;
                parents_num *= 5;
                node_nums -= parents_num;
            }
            // last level
            parents_idx = current_idx - 1;
            while (node_nums > 5) {
                nodes[parents_idx]->add_children(5);
                for (int i = 0; i < 5; ++i) {
                    nodes[parents_idx]->children[i] = nodes[node_nums + current_idx - 5 + i];
                }
                node_nums -= 5;
                parents_idx -= 1;
            }
            if (node_nums == 0)
                return;
            nodes[parents_idx]->add_children(node_nums);
            for (int i = 0; i < node_nums; ++i) {
                nodes[parents_idx]->children[i] = nodes[current_idx + i];
            }
        }
        init_order();
    }

    void init_order() {
        encode_list.resize(groups_);
        if (size_ <= 4) {
            for (int i = 0; i < size_; ++i)
                encode_list[0].push_back(i);
        } else if (groups_ <= 4) {
            encode_list[0].push_back(0);
            int pivot = 1;
            for (int i = 0; i < nodes[0]->child_size_ - 1; ++i) {
                pivot = search_children(nodes[0]->children[i], pivot);
                nodes[0]->masks.push_back(SEARCH_MASK[i + 1]);
                encode_list[0].push_back(pivot++);
            }
            while (encode_list[0].size() < 3) {
                encode_list[0].push_back(pivot++);
            }
            search_children(nodes[0]->children[nodes[0]->child_size_ - 1], pivot);
            nodes[0]->masks.push_back(SEARCH_MASK[3]);
            encode_list[0].push_back(size_ - 1);
        } else {
            encode_list[0].resize(4);
            encode_list[0][0] = 0;
            encode_list[0][3] = size_ - 1;
            nodes[0]->masks = {SEARCH_MASK[1], SEARCH_MASK[2], SEARCH_MASK[3]};
            int pivot1 = search_children(nodes[0]->children[0], 1);
            encode_list[0][1] = pivot1;
            int pivot2 = search_children(nodes[0]->children[1], pivot1 + 1);
            encode_list[0][2] = pivot2;
            search_children(nodes[0]->children[2], pivot2 + 1);
        }

    }

    std::vector<uint32_t> get_order(){
        std::vector<uint32_t> order;
        for (auto list: encode_list) {
            order.insert(order.end(), list.begin(), list.end());
        }
        return order;
    }

    uint32_t search_children(TreeNode *node, uint32_t begin) {
        if (node->children == nullptr) {
            if (node->idx_ == groups_ - 1) {
                for (; begin < size_ - 1; ++begin)
                    encode_list[node->idx_].push_back(begin);
                return begin;
            } else {
                encode_list[node->idx_] = {begin, begin + 1, begin + 2, begin + 3};
                return begin + 4;
            }
        } else {
            int pivot1 = begin;
            for (int i = 0; i < node->child_size_ - 1; ++i) {
                pivot1 = search_children(node->children[i], pivot1);
                node->masks.push_back(SEARCH_MASK[i]);
                encode_list[node->idx_].push_back(pivot1++);
            }
            while (encode_list[node->idx_].size() < 4)
                encode_list[node->idx_].push_back(pivot1++);
            node->masks.push_back(SEARCH_MASK[4]);
            return search_children(node->children[node->child_size_ - 1], pivot1);
        }
    }

    TreeNode *get_root() {
        return nodes[0];
    }
};


class DeltaSIMDCodecV3 : public DeltaSIMDCodecV2 {
public:
    FindRes FindWithCount(uint8_t *inbyte, uint32_t count, uint32_t element) override;

    uint32_t GetRequiredBytes(const std::vector<uint32_t> &list) override;

    void DecodeControl(uint8_t *inbyte, int count, uint32_t **out);

    uint32_t GetRequiredBytes(const std::vector<uint32_t> &list, uint32_t begin, uint32_t block_size) override;



protected:
    __m128i RecoveryFromDelta(__m128i data) {
        __m128i add = _mm_slli_si128(data, 4);
        data = _mm_add_epi32(data, add);
        add = _mm_slli_si128(data, 8);
        data = _mm_add_epi32(data, add);
        return data;

    }
    void RecoveryFromDelta(uint32_t *decode,uint32_t* recovery) {
        uint32_t tmp[4];
        for(int i=1;i<4;++i)
            decode[i]+=decode[i-1];
        for(int i=2;i<4;++i)
            decode[i]+=decode[i-1];
            for(int i=0;i<4;++i)
                recovery[i]=decode[i];
    }
    uint8_t EncodeDeltas(const uint32_t *in, uint8_t *keyPtr, uint8_t *dataPtr, uint32_t count) override;

    __m128i DecodeData(uint8_t control, uint8_t *__restrict__ *data_ptr) override;

    void countByteLen(uint8_t *inbyte, uint32_t group_nums, uint32_t **out);



    FindRes DFS(TreeNode *node, __m128i &compare, int count, uint32_t *__restrict__ control_bytes_len,
                uint8_t *__restrict__ inbytes, uint8_t *__restrict__ *data_ptr);


};




static SearchTree trees_ary[41] = {SearchTree(1), SearchTree(1), SearchTree(2), SearchTree(3),
                                   SearchTree(4), SearchTree(5), SearchTree(6), SearchTree(7), SearchTree(8),
                                   SearchTree(9), SearchTree(10), SearchTree(11), SearchTree(12), SearchTree(13),
                                   SearchTree(14), SearchTree(15), SearchTree(16), SearchTree(17), SearchTree(18),
                                   SearchTree(19), SearchTree(20), SearchTree(21), SearchTree(22), SearchTree(23),
                                   SearchTree(24), SearchTree(25), SearchTree(26), SearchTree(27), SearchTree(28),
                                   SearchTree(29), SearchTree(30), SearchTree(31), SearchTree(32), SearchTree(33),
                                   SearchTree(34), SearchTree(35), SearchTree(36), SearchTree(37), SearchTree(38),
                                   SearchTree(39), SearchTree(40)};


static uint32_t ary_order[40][40]{
        {0},
        {0, 1},
        {0, 1, 2},
        {0, 1, 2,  3},
        {0, 1, 2,  4,  3},
        {0, 1, 2,  5,  3, 4},
        {0, 1, 2,  6,  3, 4, 5},
        {0, 1, 2,  7,  3, 4, 5, 6},
        {0, 5, 6,  8,  1, 2, 3, 4, 7},
        {0, 5, 6,  9,  1, 2, 3, 4, 7, 8},
        {0, 5, 6,  10, 1, 2, 3, 4, 7, 8, 9},
        {0, 5, 6,  11, 1, 2, 3, 4, 7, 8, 9, 10},
        {0, 5, 10, 12, 1, 2, 3, 4, 6, 7, 8, 9, 11},
        {0, 5, 10, 13, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12},
        {0, 5, 10, 14, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13},
        {0, 5, 10, 15, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14},
        {0, 5, 10, 16, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15},
        {0, 5, 10, 17, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16},
        {0, 5, 10, 18, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17},
        {0, 5, 10, 19, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18},
        {0, 5, 10, 20, 1, 2, 3, 4, 6, 7, 8, 9, 15, 16, 17, 18, 11, 12, 13, 14, 19},
        {0, 5, 10, 21, 1, 2, 3, 4, 6, 7, 8, 9, 15, 16, 17, 18, 11, 12, 13, 14, 19, 20},
        {0, 5, 10, 22, 1, 2, 3, 4, 6, 7, 8, 9, 15, 16, 17, 18, 11, 12, 13, 14, 19, 20, 21},
        {0, 5, 10, 23, 1, 2, 3, 4, 6, 7, 8, 9, 15, 16, 17, 18, 11, 12, 13, 14, 19, 20, 21, 22},
        {0, 5, 10, 24, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 21, 22, 11, 12, 13, 14, 16, 17, 18, 19, 23},
        {0, 5, 10, 25, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 21, 22, 11, 12, 13, 14, 16, 17, 18, 19, 23, 24},
        {0, 5, 10, 26, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 21, 22, 11, 12, 13, 14, 16, 17, 18, 19, 23, 24, 25},
        {0, 5, 10, 27, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 21, 22, 11, 12, 13, 14, 16, 17, 18, 19, 23, 24, 25, 26},
        {0, 5, 10, 28, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 26, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27},
        {0, 5, 10, 29, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 26, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28},
        {0, 5, 10, 30, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 26, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29},
        {0, 5, 10, 31, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 26, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30},
        {0, 5, 10, 32, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 30, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31},
        {0, 5, 10, 33, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 30, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32},
        {0, 5, 10, 34, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 30, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33},
        {0, 5, 10, 35, 1, 2, 3, 4, 6, 7, 8, 9, 15, 20, 25, 30, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34},
        {0, 5, 14, 36, 1, 2, 3, 4, 6, 7, 8, 9, 19, 24, 29, 34, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35},
        {0, 5, 14, 37, 1, 2, 3, 4, 6, 7, 8, 9, 19, 24, 29, 34, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36},
        {0, 5, 14, 38, 1, 2, 3, 4, 6, 7, 8, 9, 19, 24, 29, 34, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37},
        {0, 5, 14, 39, 1, 2, 3, 4, 6, 7, 8, 9, 19, 24, 29, 34, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38}
};

// 1byte控制位对应数据位的长度
static uint8_t lengthTable[256] = {
        4, 5, 6, 7, 5, 6, 7, 8, 6, 7, 8, 9, 7, 8, 9, 10, 5, 6, 7, 8, 6, 7, 8, 9, 7, 8, 9, 10, 8, 9, 10, 11, 6, 7, 8, 9,
        7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 5, 6, 7, 8,
        6, 7, 8, 9, 7, 8, 9, 10, 8, 9, 10, 11, 6, 7, 8, 9, 7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 7, 8, 9, 10, 8, 9,
        10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 11, 12, 13, 14, 6, 7, 8, 9,
        7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 8, 9, 10,
        11, 9, 10, 11, 12, 10, 11, 12, 13, 11, 12, 13, 14, 9, 10, 11, 12, 10, 11, 12, 13, 11, 12, 13, 14, 12, 13, 14,
        15, 7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12, 13, 11,
        12, 13, 14, 9, 10, 11, 12, 10, 11, 12, 13, 11, 12, 13, 14, 12, 13, 14, 15, 10, 11, 12, 13, 11, 12, 13, 14, 12,
        13, 14, 15, 13, 14, 15, 16};

static uint8_t TotalLengthTable[256][4] = {
        {1, 2, 3,  4},
        {2, 3, 4,  5},
        {3, 4, 5,  6},
        {4, 5, 6,  7},
        {1, 3, 4,  5},
        {2, 4, 5,  6},
        {3, 5, 6,  7},
        {4, 6, 7,  8},
        {1, 4, 5,  6},
        {2, 5, 6,  7},
        {3, 6, 7,  8},
        {4, 7, 8,  9},
        {1, 5, 6,  7},
        {2, 6, 7,  8},
        {3, 7, 8,  9},
        {4, 8, 9,  10},
        {1, 2, 4,  5},
        {2, 3, 5,  6},
        {3, 4, 6,  7},
        {4, 5, 7,  8},
        {1, 3, 5,  6},
        {2, 4, 6,  7},
        {3, 5, 7,  8},
        {4, 6, 8,  9},
        {1, 4, 6,  7},
        {2, 5, 7,  8},
        {3, 6, 8,  9},
        {4, 7, 9,  10},
        {1, 5, 7,  8},
        {2, 6, 8,  9},
        {3, 7, 9,  10},
        {4, 8, 10, 11},
        {1, 2, 5,  6},
        {2, 3, 6,  7},
        {3, 4, 7,  8},
        {4, 5, 8,  9},
        {1, 3, 6,  7},
        {2, 4, 7,  8},
        {3, 5, 8,  9},
        {4, 6, 9,  10},
        {1, 4, 7,  8},
        {2, 5, 8,  9},
        {3, 6, 9,  10},
        {4, 7, 10, 11},
        {1, 5, 8,  9},
        {2, 6, 9,  10},
        {3, 7, 10, 11},
        {4, 8, 11, 12},
        {1, 2, 6,  7},
        {2, 3, 7,  8},
        {3, 4, 8,  9},
        {4, 5, 9,  10},
        {1, 3, 7,  8},
        {2, 4, 8,  9},
        {3, 5, 9,  10},
        {4, 6, 10, 11},
        {1, 4, 8,  9},
        {2, 5, 9,  10},
        {3, 6, 10, 11},
        {4, 7, 11, 12},
        {1, 5, 9,  10},
        {2, 6, 10, 11},
        {3, 7, 11, 12},
        {4, 8, 12, 13},
        {1, 2, 3,  5},
        {2, 3, 4,  6},
        {3, 4, 5,  7},
        {4, 5, 6,  8},
        {1, 3, 4,  6},
        {2, 4, 5,  7},
        {3, 5, 6,  8},
        {4, 6, 7,  9},
        {1, 4, 5,  7},
        {2, 5, 6,  8},
        {3, 6, 7,  9},
        {4, 7, 8,  10},
        {1, 5, 6,  8},
        {2, 6, 7,  9},
        {3, 7, 8,  10},
        {4, 8, 9,  11},
        {1, 2, 4,  6},
        {2, 3, 5,  7},
        {3, 4, 6,  8},
        {4, 5, 7,  9},
        {1, 3, 5,  7},
        {2, 4, 6,  8},
        {3, 5, 7,  9},
        {4, 6, 8,  10},
        {1, 4, 6,  8},
        {2, 5, 7,  9},
        {3, 6, 8,  10},
        {4, 7, 9,  11},
        {1, 5, 7,  9},
        {2, 6, 8,  10},
        {3, 7, 9,  11},
        {4, 8, 10, 12},
        {1, 2, 5,  7},
        {2, 3, 6,  8},
        {3, 4, 7,  9},
        {4, 5, 8,  10},
        {1, 3, 6,  8},
        {2, 4, 7,  9},
        {3, 5, 8,  10},
        {4, 6, 9,  11},
        {1, 4, 7,  9},
        {2, 5, 8,  10},
        {3, 6, 9,  11},
        {4, 7, 10, 12},
        {1, 5, 8,  10},
        {2, 6, 9,  11},
        {3, 7, 10, 12},
        {4, 8, 11, 13},
        {1, 2, 6,  8},
        {2, 3, 7,  9},
        {3, 4, 8,  10},
        {4, 5, 9,  11},
        {1, 3, 7,  9},
        {2, 4, 8,  10},
        {3, 5, 9,  11},
        {4, 6, 10, 12},
        {1, 4, 8,  10},
        {2, 5, 9,  11},
        {3, 6, 10, 12},
        {4, 7, 11, 13},
        {1, 5, 9,  11},
        {2, 6, 10, 12},
        {3, 7, 11, 13},
        {4, 8, 12, 14},
        {1, 2, 3,  6},
        {2, 3, 4,  7},
        {3, 4, 5,  8},
        {4, 5, 6,  9},
        {1, 3, 4,  7},
        {2, 4, 5,  8},
        {3, 5, 6,  9},
        {4, 6, 7,  10},
        {1, 4, 5,  8},
        {2, 5, 6,  9},
        {3, 6, 7,  10},
        {4, 7, 8,  11},
        {1, 5, 6,  9},
        {2, 6, 7,  10},
        {3, 7, 8,  11},
        {4, 8, 9,  12},
        {1, 2, 4,  7},
        {2, 3, 5,  8},
        {3, 4, 6,  9},
        {4, 5, 7,  10},
        {1, 3, 5,  8},
        {2, 4, 6,  9},
        {3, 5, 7,  10},
        {4, 6, 8,  11},
        {1, 4, 6,  9},
        {2, 5, 7,  10},
        {3, 6, 8,  11},
        {4, 7, 9,  12},
        {1, 5, 7,  10},
        {2, 6, 8,  11},
        {3, 7, 9,  12},
        {4, 8, 10, 13},
        {1, 2, 5,  8},
        {2, 3, 6,  9},
        {3, 4, 7,  10},
        {4, 5, 8,  11},
        {1, 3, 6,  9},
        {2, 4, 7,  10},
        {3, 5, 8,  11},
        {4, 6, 9,  12},
        {1, 4, 7,  10},
        {2, 5, 8,  11},
        {3, 6, 9,  12},
        {4, 7, 10, 13},
        {1, 5, 8,  11},
        {2, 6, 9,  12},
        {3, 7, 10, 13},
        {4, 8, 11, 14},
        {1, 2, 6,  9},
        {2, 3, 7,  10},
        {3, 4, 8,  11},
        {4, 5, 9,  12},
        {1, 3, 7,  10},
        {2, 4, 8,  11},
        {3, 5, 9,  12},
        {4, 6, 10, 13},
        {1, 4, 8,  11},
        {2, 5, 9,  12},
        {3, 6, 10, 13},
        {4, 7, 11, 14},
        {1, 5, 9,  12},
        {2, 6, 10, 13},
        {3, 7, 11, 14},
        {4, 8, 12, 15},
        {1, 2, 3,  7},
        {2, 3, 4,  8},
        {3, 4, 5,  9},
        {4, 5, 6,  10},
        {1, 3, 4,  8},
        {2, 4, 5,  9},
        {3, 5, 6,  10},
        {4, 6, 7,  11},
        {1, 4, 5,  9},
        {2, 5, 6,  10},
        {3, 6, 7,  11},
        {4, 7, 8,  12},
        {1, 5, 6,  10},
        {2, 6, 7,  11},
        {3, 7, 8,  12},
        {4, 8, 9,  13},
        {1, 2, 4,  8},
        {2, 3, 5,  9},
        {3, 4, 6,  10},
        {4, 5, 7,  11},
        {1, 3, 5,  9},
        {2, 4, 6,  10},
        {3, 5, 7,  11},
        {4, 6, 8,  12},
        {1, 4, 6,  10},
        {2, 5, 7,  11},
        {3, 6, 8,  12},
        {4, 7, 9,  13},
        {1, 5, 7,  11},
        {2, 6, 8,  12},
        {3, 7, 9,  13},
        {4, 8, 10, 14},
        {1, 2, 5,  9},
        {2, 3, 6,  10},
        {3, 4, 7,  11},
        {4, 5, 8,  12},
        {1, 3, 6,  10},
        {2, 4, 7,  11},
        {3, 5, 8,  12},
        {4, 6, 9,  13},
        {1, 4, 7,  11},
        {2, 5, 8,  12},
        {3, 6, 9,  13},
        {4, 7, 10, 14},
        {1, 5, 8,  12},
        {2, 6, 9,  13},
        {3, 7, 10, 14},
        {4, 8, 11, 15},
        {1, 2, 6,  10},
        {2, 3, 7,  11},
        {3, 4, 8,  12},
        {4, 5, 9,  13},
        {1, 3, 7,  11},
        {2, 4, 8,  12},
        {3, 5, 9,  13},
        {4, 6, 10, 14},
        {1, 4, 8,  12},
        {2, 5, 9,  13},
        {3, 6, 10, 14},
        {4, 7, 11, 15},
        {1, 5, 9,  13},
        {2, 6, 10, 14},
        {3, 7, 11, 15},
        {4, 8, 12, 16}
};

// 1byte控制位对应的shuffle mask
static int8_t shuffleTable[256][16] = {
        {0, -1, -1, -1, 1, -1, -1, -1, 2, -1, -1, -1, 3,  -1, -1, -1}, // 1111
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, -1, -1, -1, 4,  -1, -1, -1},  // 2111
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, -1, -1, -1, 5,  -1, -1, -1},   // 3111
        {0, 1,  2,  3,  4, -1, -1, -1, 5, -1, -1, -1, 6,  -1, -1, -1},    // 4111
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, -1, -1, -1, 4,  -1, -1, -1},  // 1211
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, -1, -1, -1, 5,  -1, -1, -1},   // 2211
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, -1, -1, -1, 6,  -1, -1, -1},    // 3211
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, -1, -1, -1, 7,  -1, -1, -1},     // 4211
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, -1, -1, -1, 5,  -1, -1, -1},   // 1311
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, -1, -1, -1, 6,  -1, -1, -1},    // 2311
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, -1, -1, -1, 7,  -1, -1, -1},     // 3311
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, -1, -1, -1, 8,  -1, -1, -1},      // 4311
        {0, -1, -1, -1, 1, 2,  3,  4,  5, -1, -1, -1, 6,  -1, -1, -1},    // 1411
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, -1, -1, -1, 7,  -1, -1, -1},     // 2411
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, -1, -1, -1, 8,  -1, -1, -1},      // 3411
        {0, 1,  2,  3,  4, 5,  6,  7,  8, -1, -1, -1, 9,  -1, -1, -1},       // 4411
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  -1, -1, 4,  -1, -1, -1},  // 1121
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  -1, -1, 5,  -1, -1, -1},   // 2121
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  -1, -1, 6,  -1, -1, -1},    // 3121
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  -1, -1, 7,  -1, -1, -1},     // 4121
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  -1, -1, 5,  -1, -1, -1},   // 1221
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  -1, -1, 6,  -1, -1, -1},    // 2221
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  -1, -1, 7,  -1, -1, -1},     // 3221
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  -1, -1, 8,  -1, -1, -1},      // 4221
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  -1, -1, 6,  -1, -1, -1},    // 1321
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  -1, -1, 7,  -1, -1, -1},     // 2321
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  -1, -1, 8,  -1, -1, -1},      // 3321
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  -1, -1, 9,  -1, -1, -1},       // 4321
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  -1, -1, 7,  -1, -1, -1},     // 1421
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  -1, -1, 8,  -1, -1, -1},      // 2421
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  -1, -1, 9,  -1, -1, -1},       // 3421
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  -1, -1, 10, -1, -1, -1},       // 4421
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  -1, 5,  -1, -1, -1},   // 1131
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  -1, 6,  -1, -1, -1},    // 2131
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  -1, 7,  -1, -1, -1},     // 3131
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  -1, 8,  -1, -1, -1},      // 4131
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  -1, 6,  -1, -1, -1},    // 1231
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  -1, 7,  -1, -1, -1},     // 2231
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  -1, 8,  -1, -1, -1},      // 3231
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  -1, 9,  -1, -1, -1},       // 4231
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  -1, 7,  -1, -1, -1},     // 1331
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  -1, 8,  -1, -1, -1},      // 2331
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  -1, 9,  -1, -1, -1},       // 3331
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  -1, 10, -1, -1, -1},       // 4331
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  -1, 8,  -1, -1, -1},      // 1431
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  -1, 9,  -1, -1, -1},       // 2431
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  -1, 10, -1, -1, -1},       // 3431
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, -1, 11, -1, -1, -1},       // 4431
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  5,  6,  -1, -1, -1},    // 1141
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  6,  7,  -1, -1, -1},     // 2141
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  7,  8,  -1, -1, -1},      // 3141
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  8,  9,  -1, -1, -1},       // 4141
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  6,  7,  -1, -1, -1},     // 1241
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  7,  8,  -1, -1, -1},      // 2241
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  8,  9,  -1, -1, -1},       // 3241
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  9,  10, -1, -1, -1},       // 4241
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  7,  8,  -1, -1, -1},      // 1341
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  8,  9,  -1, -1, -1},       // 2341
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  9,  10, -1, -1, -1},       // 3341
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  10, 11, -1, -1, -1},       // 4341
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  8,  9,  -1, -1, -1},       // 1441
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  9,  10, -1, -1, -1},       // 2441
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  10, 11, -1, -1, -1},       // 3441
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, 11, 12, -1, -1, -1},       // 4441
        {0, -1, -1, -1, 1, -1, -1, -1, 2, -1, -1, -1, 3,  4,  -1, -1},  // 1112
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, -1, -1, -1, 4,  5,  -1, -1},   // 2112
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, -1, -1, -1, 5,  6,  -1, -1},    // 3112
        {0, 1,  2,  3,  4, -1, -1, -1, 5, -1, -1, -1, 6,  7,  -1, -1},     // 4112
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, -1, -1, -1, 4,  5,  -1, -1},   // 1212
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, -1, -1, -1, 5,  6,  -1, -1},    // 2212
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, -1, -1, -1, 6,  7,  -1, -1},     // 3212
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, -1, -1, -1, 7,  8,  -1, -1},      // 4212
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, -1, -1, -1, 5,  6,  -1, -1},    // 1312
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, -1, -1, -1, 6,  7,  -1, -1},     // 2312
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, -1, -1, -1, 7,  8,  -1, -1},      // 3312
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, -1, -1, -1, 8,  9,  -1, -1},       // 4312
        {0, -1, -1, -1, 1, 2,  3,  4,  5, -1, -1, -1, 6,  7,  -1, -1},     // 1412
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, -1, -1, -1, 7,  8,  -1, -1},      // 2412
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, -1, -1, -1, 8,  9,  -1, -1},       // 3412
        {0, 1,  2,  3,  4, 5,  6,  7,  8, -1, -1, -1, 9,  10, -1, -1},       // 4412
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  -1, -1, 4,  5,  -1, -1},   // 1122
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  -1, -1, 5,  6,  -1, -1},    // 2122
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  -1, -1, 6,  7,  -1, -1},     // 3122
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  -1, -1, 7,  8,  -1, -1},      // 4122
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  -1, -1, 5,  6,  -1, -1},    // 1222
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  -1, -1, 6,  7,  -1, -1},     // 2222
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  -1, -1, 7,  8,  -1, -1},      // 3222
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  -1, -1, 8,  9,  -1, -1},       // 4222
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  -1, -1, 6,  7,  -1, -1},     // 1322
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  -1, -1, 7,  8,  -1, -1},      // 2322
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  -1, -1, 8,  9,  -1, -1},       // 3322
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  -1, -1, 9,  10, -1, -1},       // 4322
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  -1, -1, 7,  8,  -1, -1},      // 1422
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  -1, -1, 8,  9,  -1, -1},       // 2422
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  -1, -1, 9,  10, -1, -1},       // 3422
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  -1, -1, 10, 11, -1, -1},       // 4422
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  -1, 5,  6,  -1, -1},    // 1132
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  -1, 6,  7,  -1, -1},     // 2132
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  -1, 7,  8,  -1, -1},      // 3132
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  -1, 8,  9,  -1, -1},       // 4132
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  -1, 6,  7,  -1, -1},     // 1232
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  -1, 7,  8,  -1, -1},      // 2232
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  -1, 8,  9,  -1, -1},       // 3232
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  -1, 9,  10, -1, -1},       // 4232
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  -1, 7,  8,  -1, -1},      // 1332
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  -1, 8,  9,  -1, -1},       // 2332
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  -1, 9,  10, -1, -1},       // 3332
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  -1, 10, 11, -1, -1},       // 4332
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  -1, 8,  9,  -1, -1},       // 1432
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  -1, 9,  10, -1, -1},       // 2432
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  -1, 10, 11, -1, -1},       // 3432
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, -1, 11, 12, -1, -1},       // 4432
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  5,  6,  7,  -1, -1},     // 1142
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  6,  7,  8,  -1, -1},      // 2142
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  7,  8,  9,  -1, -1},       // 3142
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  8,  9,  10, -1, -1},       // 4142
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  6,  7,  8,  -1, -1},      // 1242
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  7,  8,  9,  -1, -1},       // 2242
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  8,  9,  10, -1, -1},       // 3242
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  9,  10, 11, -1, -1},       // 4242
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  7,  8,  9,  -1, -1},       // 1342
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  8,  9,  10, -1, -1},       // 2342
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  9,  10, 11, -1, -1},       // 3342
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  10, 11, 12, -1, -1},       // 4342
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  8,  9,  10, -1, -1},       // 1442
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  9,  10, 11, -1, -1},       // 2442
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  10, 11, 12, -1, -1},       // 3442
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, 11, 12, 13, -1, -1},       // 4442
        {0, -1, -1, -1, 1, -1, -1, -1, 2, -1, -1, -1, 3,  4,  5,  -1},   // 1113
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, -1, -1, -1, 4,  5,  6,  -1},    // 2113
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, -1, -1, -1, 5,  6,  7,  -1},     // 3113
        {0, 1,  2,  3,  4, -1, -1, -1, 5, -1, -1, -1, 6,  7,  8,  -1},      // 4113
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, -1, -1, -1, 4,  5,  6,  -1},    // 1213
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, -1, -1, -1, 5,  6,  7,  -1},     // 2213
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, -1, -1, -1, 6,  7,  8,  -1},      // 3213
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, -1, -1, -1, 7,  8,  9,  -1},       // 4213
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, -1, -1, -1, 5,  6,  7,  -1},     // 1313
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, -1, -1, -1, 6,  7,  8,  -1},      // 2313
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, -1, -1, -1, 7,  8,  9,  -1},       // 3313
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, -1, -1, -1, 8,  9,  10, -1},       // 4313
        {0, -1, -1, -1, 1, 2,  3,  4,  5, -1, -1, -1, 6,  7,  8,  -1},      // 1413
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, -1, -1, -1, 7,  8,  9,  -1},       // 2413
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, -1, -1, -1, 8,  9,  10, -1},       // 3413
        {0, 1,  2,  3,  4, 5,  6,  7,  8, -1, -1, -1, 9,  10, 11, -1},       // 4413
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  -1, -1, 4,  5,  6,  -1},    // 1123
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  -1, -1, 5,  6,  7,  -1},     // 2123
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  -1, -1, 6,  7,  8,  -1},      // 3123
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  -1, -1, 7,  8,  9,  -1},       // 4123
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  -1, -1, 5,  6,  7,  -1},     // 1223
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  -1, -1, 6,  7,  8,  -1},      // 2223
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  -1, -1, 7,  8,  9,  -1},       // 3223
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  -1, -1, 8,  9,  10, -1},       // 4223
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  -1, -1, 6,  7,  8,  -1},      // 1323
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  -1, -1, 7,  8,  9,  -1},       // 2323
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  -1, -1, 8,  9,  10, -1},       // 3323
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  -1, -1, 9,  10, 11, -1},       // 4323
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  -1, -1, 7,  8,  9,  -1},       // 1423
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  -1, -1, 8,  9,  10, -1},       // 2423
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  -1, -1, 9,  10, 11, -1},       // 3423
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  -1, -1, 10, 11, 12, -1},       // 4423
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  -1, 5,  6,  7,  -1},     // 1133
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  -1, 6,  7,  8,  -1},      // 2133
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  -1, 7,  8,  9,  -1},       // 3133
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  -1, 8,  9,  10, -1},       // 4133
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  -1, 6,  7,  8,  -1},      // 1233
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  -1, 7,  8,  9,  -1},       // 2233
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  -1, 8,  9,  10, -1},       // 3233
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  -1, 9,  10, 11, -1},       // 4233
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  -1, 7,  8,  9,  -1},       // 1333
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  -1, 8,  9,  10, -1},       // 2333
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  -1, 9,  10, 11, -1},       // 3333
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  -1, 10, 11, 12, -1},       // 4333
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  -1, 8,  9,  10, -1},       // 1433
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  -1, 9,  10, 11, -1},       // 2433
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  -1, 10, 11, 12, -1},       // 3433
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, -1, 11, 12, 13, -1},       // 4433
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  5,  6,  7,  8,  -1},      // 1143
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  6,  7,  8,  9,  -1},       // 2143
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  7,  8,  9,  10, -1},       // 3143
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  8,  9,  10, 11, -1},       // 4143
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  6,  7,  8,  9,  -1},       // 1243
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  7,  8,  9,  10, -1},       // 2243
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  8,  9,  10, 11, -1},       // 3243
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  9,  10, 11, 12, -1},       // 4243
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  7,  8,  9,  10, -1},       // 1343
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  8,  9,  10, 11, -1},       // 2343
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  9,  10, 11, 12, -1},       // 3343
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  10, 11, 12, 13, -1},       // 4343
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  8,  9,  10, 11, -1},       // 1443
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  9,  10, 11, 12, -1},       // 2443
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  10, 11, 12, 13, -1},       // 3443
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, 11, 12, 13, 14, -1},       // 4443
        {0, -1, -1, -1, 1, -1, -1, -1, 2, -1, -1, -1, 3,  4,  5,  6},    // 1114
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, -1, -1, -1, 4,  5,  6,  7},     // 2114
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, -1, -1, -1, 5,  6,  7,  8},      // 3114
        {0, 1,  2,  3,  4, -1, -1, -1, 5, -1, -1, -1, 6,  7,  8,  9},       // 4114
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, -1, -1, -1, 4,  5,  6,  7},     // 1214
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, -1, -1, -1, 5,  6,  7,  8},      // 2214
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, -1, -1, -1, 6,  7,  8,  9},       // 3214
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, -1, -1, -1, 7,  8,  9,  10},       // 4214
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, -1, -1, -1, 5,  6,  7,  8},      // 1314
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, -1, -1, -1, 6,  7,  8,  9},       // 2314
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, -1, -1, -1, 7,  8,  9,  10},       // 3314
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, -1, -1, -1, 8,  9,  10, 11},       // 4314
        {0, -1, -1, -1, 1, 2,  3,  4,  5, -1, -1, -1, 6,  7,  8,  9},       // 1414
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, -1, -1, -1, 7,  8,  9,  10},       // 2414
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, -1, -1, -1, 8,  9,  10, 11},       // 3414
        {0, 1,  2,  3,  4, 5,  6,  7,  8, -1, -1, -1, 9,  10, 11, 12},       // 4414
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  -1, -1, 4,  5,  6,  7},     // 1124
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  -1, -1, 5,  6,  7,  8},      // 2124
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  -1, -1, 6,  7,  8,  9},       // 3124
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  -1, -1, 7,  8,  9,  10},       // 4124
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  -1, -1, 5,  6,  7,  8},      // 1224
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  -1, -1, 6,  7,  8,  9},       // 2224
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  -1, -1, 7,  8,  9,  10},       // 3224
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  -1, -1, 8,  9,  10, 11},       // 4224
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  -1, -1, 6,  7,  8,  9},       // 1324
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  -1, -1, 7,  8,  9,  10},       // 2324
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  -1, -1, 8,  9,  10, 11},       // 3324
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  -1, -1, 9,  10, 11, 12},       // 4324
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  -1, -1, 7,  8,  9,  10},       // 1424
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  -1, -1, 8,  9,  10, 11},       // 2424
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  -1, -1, 9,  10, 11, 12},       // 3424
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  -1, -1, 10, 11, 12, 13},       // 4424
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  -1, 5,  6,  7,  8},      // 1134
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  -1, 6,  7,  8,  9},       // 2134
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  -1, 7,  8,  9,  10},       // 3134
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  -1, 8,  9,  10, 11},       // 4134
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  -1, 6,  7,  8,  9},       // 1234
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  -1, 7,  8,  9,  10},       // 2234
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  -1, 8,  9,  10, 11},       // 3234
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  -1, 9,  10, 11, 12},       // 4234
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  -1, 7,  8,  9,  10},       // 1334
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  -1, 8,  9,  10, 11},       // 2334
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  -1, 9,  10, 11, 12},       // 3334
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  -1, 10, 11, 12, 13},       // 4334
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  -1, 8,  9,  10, 11},       // 1434
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  -1, 9,  10, 11, 12},       // 2434
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  -1, 10, 11, 12, 13},       // 3434
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, -1, 11, 12, 13, 14},       // 4434
        {0, -1, -1, -1, 1, -1, -1, -1, 2, 3,  4,  5,  6,  7,  8,  9},       // 1144
        {0, 1,  -1, -1, 2, -1, -1, -1, 3, 4,  5,  6,  7,  8,  9,  10},       // 2144
        {0, 1,  2,  -1, 3, -1, -1, -1, 4, 5,  6,  7,  8,  9,  10, 11},       // 3144
        {0, 1,  2,  3,  4, -1, -1, -1, 5, 6,  7,  8,  9,  10, 11, 12},       // 4144
        {0, -1, -1, -1, 1, 2,  -1, -1, 3, 4,  5,  6,  7,  8,  9,  10},       // 1244
        {0, 1,  -1, -1, 2, 3,  -1, -1, 4, 5,  6,  7,  8,  9,  10, 11},       // 2244
        {0, 1,  2,  -1, 3, 4,  -1, -1, 5, 6,  7,  8,  9,  10, 11, 12},       // 3244
        {0, 1,  2,  3,  4, 5,  -1, -1, 6, 7,  8,  9,  10, 11, 12, 13},       // 4244
        {0, -1, -1, -1, 1, 2,  3,  -1, 4, 5,  6,  7,  8,  9,  10, 11},       // 1344
        {0, 1,  -1, -1, 2, 3,  4,  -1, 5, 6,  7,  8,  9,  10, 11, 12},       // 2344
        {0, 1,  2,  -1, 3, 4,  5,  -1, 6, 7,  8,  9,  10, 11, 12, 13},       // 3344
        {0, 1,  2,  3,  4, 5,  6,  -1, 7, 8,  9,  10, 11, 12, 13, 14},       // 4344
        {0, -1, -1, -1, 1, 2,  3,  4,  5, 6,  7,  8,  9,  10, 11, 12},       // 1444
        {0, 1,  -1, -1, 2, 3,  4,  5,  6, 7,  8,  9,  10, 11, 12, 13},       // 2444
        {0, 1,  2,  -1, 3, 4,  5,  6,  7, 8,  9,  10, 11, 12, 13, 14},       // 3444
        {0, 1,  2,  3,  4, 5,  6,  7,  8, 9,  10, 11, 12, 13, 14, 15}        // 4444
};












#endif //VEND_DELTA_SIMD_CODEC_H
